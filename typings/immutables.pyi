from __future__ import annotations
from typing import Generic, Hashable, Iterator, Literal, Mapping, Optional, Tuple, TypeVar, Union, overload

K = TypeVar("K", bound=Hashable, contravariant=True)
C = TypeVar("C", bound=Hashable, contravariant=True)
V = TypeVar("V")
U = TypeVar("U")
S = TypeVar("S", bound=str, contravariant=True)

class Map(Generic[K, V]):
    @overload
    def __init__(self): ...
    @overload
    def __init__(self, mapping: Mapping[K, V]): ...
    @overload
    def __init__(self: Map[S, V], **kwargs: V): ...
    def __getitem__(self, k: K) -> V: ...
    def __contains__(self, k: Hashable) -> bool: ...
    @overload
    def get(self, k: K) -> Optional[V]: ...
    @overload
    def get(self, k: K, default: U) -> Union[V, U]: ...
    def set(self, k: Union[K, C], v: V) -> Map[Union[K, C], V]: ...
    def delete(self, k: K) -> Map[K, V]: ...
    def update(self, mapping: Mapping[C, U]) -> Map[Union[K, C], Union[V, U]]: ...
    def items(self) -> Iterator[Tuple[K, V]]: ...
